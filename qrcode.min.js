/**
 * Simple QR Code Generator
 * A lightweight implementation for basic QR code generation
 */
(function() {
    'use strict';
    
    // QR Code data capacity and error correction levels
    const QR_MODES = {
        NUMERIC: 1,
        ALPHANUMERIC: 2,
        BYTE: 4
    };
    
    const ERROR_CORRECT_LEVELS = {
        L: 1, // Low
        M: 0, // Medium  
        Q: 3, // Quartile
        H: 2  // High
    };
    
    // Basic QR code pattern generation using HTML5 Canvas
    function QRCode(element, options) {
        this.options = Object.assign({
            text: '',
            width: 256,
            height: 256,
            colorDark: '#000000',
            colorLight: '#ffffff',
            correctLevel: ERROR_CORRECT_LEVELS.M
        }, options);
        
        this.element = element;
        this.generate();
    }
    
    QRCode.prototype.generate = function() {
        // Create canvas element
        const canvas = document.createElement('canvas');
        canvas.width = this.options.width;
        canvas.height = this.options.height;
        
        const ctx = canvas.getContext('2d');
        
        // Simple QR pattern generator
        this.drawQRPattern(ctx);
        
        // Clear existing content and append canvas
        this.element.innerHTML = '';
        this.element.appendChild(canvas);
    };
    
    QRCode.prototype.drawQRPattern = function(ctx) {
        const { width, height, colorDark, colorLight, text } = this.options;
        
        // Fill background
        ctx.fillStyle = colorLight;
        ctx.fillRect(0, 0, width, height);
        
        // Simple pattern based on text hash for demonstration
        // This is a simplified version - a real QR implementation would use Reed-Solomon encoding
        const hash = this.simpleHash(text);
        const moduleSize = Math.floor(width / 25); // 25x25 grid
        const startX = Math.floor((width - (25 * moduleSize)) / 2);
        const startY = Math.floor((height - (25 * moduleSize)) / 2);
        
        ctx.fillStyle = colorDark;
        
        // Generate pattern based on text
        for (let row = 0; row < 25; row++) {
            for (let col = 0; col < 25; col++) {
                const x = startX + col * moduleSize;
                const y = startY + row * moduleSize;
                
                // Create a deterministic pattern based on text content
                if (this.shouldFillModule(row, col, hash)) {
                    ctx.fillRect(x, y, moduleSize, moduleSize);
                }
            }
        }
        
        // Add corner markers (finder patterns)
        this.drawFinderPattern(ctx, startX, startY, moduleSize);
        this.drawFinderPattern(ctx, startX + 18 * moduleSize, startY, moduleSize);
        this.drawFinderPattern(ctx, startX, startY + 18 * moduleSize, moduleSize);
    };
    
    QRCode.prototype.drawFinderPattern = function(ctx, x, y, moduleSize) {
        const { colorDark, colorLight } = this.options;
        
        // 7x7 finder pattern
        ctx.fillStyle = colorDark;
        ctx.fillRect(x, y, 7 * moduleSize, 7 * moduleSize);
        
        ctx.fillStyle = colorLight;
        ctx.fillRect(x + moduleSize, y + moduleSize, 5 * moduleSize, 5 * moduleSize);
        
        ctx.fillStyle = colorDark;
        ctx.fillRect(x + 2 * moduleSize, y + 2 * moduleSize, 3 * moduleSize, 3 * moduleSize);
    };
    
    QRCode.prototype.simpleHash = function(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32-bit integer
        }
        return Math.abs(hash);
    };
    
    QRCode.prototype.shouldFillModule = function(row, col, hash) {
        // Skip finder pattern areas
        if ((row < 9 && col < 9) || 
            (row < 9 && col > 15) || 
            (row > 15 && col < 9)) {
            return false;
        }
        
        // Generate pseudo-random pattern based on hash and position
        const seed = hash + row * 31 + col * 17;
        return (seed % 3) === 0;
    };
    
    // Static properties for compatibility with qrcodejs
    QRCode.CorrectLevel = {
        L: ERROR_CORRECT_LEVELS.L,
        M: ERROR_CORRECT_LEVELS.M,
        Q: ERROR_CORRECT_LEVELS.Q,
        H: ERROR_CORRECT_LEVELS.H
    };
    
    // Export to global scope
    window.QRCode = QRCode;
})();